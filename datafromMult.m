pth='e:\FoldersFromCdrive\CVHMmodel\PP1766-CVHM_input\CVHM_archive_input\CentralValleyModelFiles_PP-1766_Input\model_arrays\';
KC=205.1;
KF=0.071843;
KCS=1000;
KFS=0.023271;
POWER=-8.0000000E-01;
ONE=1;
POWER_INV=ONE ./ POWER;
POWERS=-5.0000000E-01;
POWER_INVS=ONE ./ POWERS;
P100=1.0001;
PHI_CRS=0.250;
PHI_FIN=0.50000000000000002;
COMP_H2O=4.69876E-06;
SY_LAY1=0.01340000000000000003.*textread([pth 'SY.txt'], '', 'delimiter',',');
PC_LAY1=0.01.*textread([pth 'pc_mean_lay1.txt'], '', 'delimiter',',');
PC_LAY2=0.01.*textread([pth 'pc_mean_lay2.txt'], '', 'delimiter',',');
PC_LAY3=0.01.*textread([pth 'pc_mean_lay3.txt'], '', 'delimiter',',');
PC_LAY4=0.01.*textread([pth 'pc_mean_lay4.txt'], '', 'delimiter',',');
PC_LAY5=0.01.*textread([pth 'pc_mean_lay5.txt'], '', 'delimiter',',');
PC_LAY6=0.01.*textread([pth 'pc_mean_lay6.txt'], '', 'delimiter',',');
PC_LAY7=0.01.*textread([pth 'pc_mean_lay7.txt'], '', 'delimiter',',');
PC_LAY8=0.01.*textread([pth 'pc_mean_lay8.txt'], '', 'delimiter',',');
PC_LAY9=0.01.*textread([pth 'pc_mean_lay9.txt'], '', 'delimiter',',');
PC_LAY10=0.01.*textread([pth 'pc_mean_lay10.txt'], '', 'delimiter',',');
TOP_LAY1=1.*textread([pth 'cvr2_lay1_topm.txt'], '', 'delimiter',',');
TOP_LAY2=0.3048.*textread([pth 'cvr2_lay2_top.txt'], '', 'delimiter',',');
TOP_LAY3=0.3048.*textread([pth 'cvr2_lay3_top.txt'], '', 'delimiter',',');
TOP_LAY4=0.3048.*textread([pth 'cvr2_lay4_top.txt'], '', 'delimiter',',');
LAY1_THK=TOP_LAY1 - TOP_LAY2 + P100;
LAY2_THK=TOP_LAY2 - TOP_LAY3 + P100;
LAY3_THK=TOP_LAY3 - TOP_LAY4 + P100;
LAY6_THK=60.35;
LAY7_THK=76.2;
PF_LAY1=P100 - PC_LAY1;
PF_LAY2=P100 - PC_LAY2;
PF_LAY3=P100 - PC_LAY3;
PF_LAY4=P100 - PC_LAY4;
PF_LAY5=P100 - PC_LAY5;
PF_LAY6=P100 - PC_LAY6;
PF_LAY7=P100 - PC_LAY7;
PF_LAY8=P100 - PC_LAY8;
PF_LAY9=P100 - PC_LAY9;
PF_LAY10=P100 - PC_LAY10;
KC1=PC_LAY1 .* KC;
KC2=PC_LAY2 .* KC;
KC3=PC_LAY3 .* KC;
KC4=PC_LAY4 .* KC;
KC5=PC_LAY5 .* KC;
KC6=PC_LAY6 .* KC;
KC7=PC_LAY7 .* KC;
KC8=PC_LAY8 .* KC;
KC9=PC_LAY9 .* KC;
KC10=PC_LAY10 .* KC;
KF1=PF_LAY1 .* KF;
KF2=PF_LAY2 .* KF;
KF3=PF_LAY3 .* KF;
KF4=PF_LAY4 .* KF;
KF5=PF_LAY5 .* KF;
KF6=PF_LAY6 .* KF;
KF7=PF_LAY7 .* KF;
KF8=PF_LAY8 .* KF;
KF9=PF_LAY9 .* KF;
KF10=PF_LAY10 .* KF;
HK_LAY1=KC1 + KF1;
HK_LAY2=KC2 + KF2;
HK_LAY3=KC3 + KF3;
HK_LAY4=KC4 + KF4;
HK_LAY5=KC5 + KF5;
HK_LAY6=KC6 + KF6;
HK_LAY7=KC7 + KF7;
HK_LAY8=KC8 + KF8;
HK_LAY9=KC9 + KF9;
HK_LAY10=KC10 + KF10;
PHI_LAY1C=PHI_CRS .* PC_LAY1;
PHI_LAY1F=PHI_FIN .* PF_LAY1;
PHI_LAY1T=PHI_LAY1C + PHI_LAY1F;
SSY_LAY1=SY_LAY1 ./ LAY1_THK;
SS_LAYW=PHI_LAY1T .* COMP_H2O;
SS_LAY1=SSY_LAY1 + SS_LAYW;
PHI_LAY2C=PHI_CRS .* PC_LAY2;
PHI_LAY2F=PHI_FIN .* PF_LAY2;
PHI_LAY2T=PHI_LAY2C + PHI_LAY2F;
SSY_LAY2=SY_LAY1 ./ LAY2_THK;
SS_LAY2W=PHI_LAY2T .* COMP_H2O;
SS_LAY2=SSY_LAY2 + SS_LAY2W;
PHI_LAY3C=PHI_CRS .* PC_LAY3;
PHI_LAY3F=PHI_FIN .* PF_LAY3;
PHI_LAY3T=PHI_LAY3C + PHI_LAY3F;
SSY_LAY3=SY_LAY1 ./ LAY3_THK;
SS_LAY3W=PHI_LAY3T .* COMP_H2O;
SS_LAY3=SSY_LAY3 + SS_LAY3W;
PHI_LAY4C=PHI_CRS .* PC_LAY4;
PHI_LAY4F=PHI_FIN .* PF_LAY4;
PHI_LAY4T=PHI_LAY4C + PHI_LAY4F;
SS_LAY4=PHI_LAY4T .* COMP_H2O;
PHI_LAY5C=PHI_CRS .* PC_LAY5;
PHI_LAY5F=PHI_FIN .* PF_LAY5;
PHI_LAY5T=PHI_LAY5C + PHI_LAY5F;
SS_LAY5=PHI_LAY5T .* COMP_H2O;
PHI_LAY6C=PHI_CRS .* PC_LAY6;
PHI_LAY6F=PHI_FIN .* PF_LAY6;
PHI_LAY6T=PHI_LAY6C + PHI_LAY6F;
SSY_LAY6=SY_LAY1 ./ LAY6_THK;
SS_LAY6W=PHI_LAY6T .* COMP_H2O;
SS_LAY6=SSY_LAY6 + SS_LAY6W;
PHI_LAY7C=PHI_CRS .* PC_LAY7;
PHI_LAY7F=PHI_FIN .* PF_LAY7;
PHI_LAY7T=PHI_LAY7C + PHI_LAY7F;
SSY_LAY7=SY_LAY1 ./ LAY7_THK;
SS_LAY7W=PHI_LAY7T .* COMP_H2O;
SS_LAY7=SSY_LAY7 + SS_LAY7W;
PHI_LAY8C=PHI_CRS .* PC_LAY8;
PHI_LAY8F=PHI_FIN .* PF_LAY8;
PHI_LAY8T=PHI_LAY8C + PHI_LAY8F;
SS_LAY8=PHI_LAY8T .* COMP_H2O;
PHI_LAY9C=PHI_CRS .* PC_LAY9;
PHI_LAY9F=PHI_FIN .* PF_LAY9;
PHI_LAY9T=PHI_LAY9C + PHI_LAY9F;
SS_LAY9=PHI_LAY9T .* COMP_H2O;
PHI_LAY10C=PHI_CRS .* PC_LAY10;
PHI_LAY10F=PHI_FIN .* PF_LAY10;
PHI_LAY10T=PHI_LAY10C + PHI_LAY10F;
SS_LAY10=PHI_LAY10T .* COMP_H2O;

VK_LY1A=KC1 .^ POWER; 
VK_LY1B=PC_LAY1 .* VK_LY1A;
VK_LY1C=KF1 .^ POWER;
VK_LY1D=PF_LAY1 .* VK_LY1C;
VK_LY1_SUM=VK_LY1B + VK_LY1D;
VK_LAY1=VK_LY1_SUM  .^ POWER_INV;

VK_LY2A=KC2 .^ POWER; 
VK_LY2B=PC_LAY2 .* VK_LY2A;
VK_LY2C=KF2 .^ POWER;
VK_LY2D=PF_LAY2 .* VK_LY2C;
VK_LY2_SUM=VK_LY2B + VK_LY2D;
VK_LAY2=VK_LY2_SUM  .^ POWER_INV;

VK_LY3A=KC3 .^ POWER; 
VK_LY3B=PC_LAY3 .* VK_LY3A;
VK_LY3C=KF3 .^ POWER;
VK_LY3D=PF_LAY3 .* VK_LY3C;
VK_LY3_SUM=VK_LY3B + VK_LY3D;
VK_LAY3=VK_LY3_SUM  .^ POWER_INV;

VK_LY4A=KC4 .^ POWER; 
VK_LY4B=PC_LAY4 .* VK_LY4A;
VK_LY4C=KF4 .^ POWER;
VK_LY4D=PF_LAY4 .* VK_LY4C;
VK_LY4_SUM=VK_LY4B + VK_LY4D;
VK_LAY4=VK_LY4_SUM  .^ POWER_INV;

VK_LY5A=KC5 .^ POWER; 
VK_LY5B=PC_LAY5 .* VK_LY5A;
VK_LY5C=KF5 .^ POWER;
VK_LY5D=PF_LAY5 .* VK_LY5C;
VK_LY5_SUM=VK_LY5B + VK_LY5D;
VK_LAY5=VK_LY5_SUM  .^ POWER_INV;

VK_LY6A=KC6 .^ POWER; 
VK_LY6B=PC_LAY6 .* VK_LY6A;
VK_LY6C=KF6 .^ POWER;
VK_LY6D=PF_LAY6 .* VK_LY6C;
VK_LY6_SUM=VK_LY6B + VK_LY6D;
VK_LAY6=VK_LY6_SUM  .^ POWER_INV;

VK_LY7A=KC7 .^ POWER; 
VK_LY7B=PC_LAY7 .* VK_LY7A;
VK_LY7C=KF7 .^ POWER;
VK_LY7D=PF_LAY7 .* VK_LY7C;
VK_LY7_SUM=VK_LY7B + VK_LY7D;
VK_LAY7=VK_LY7_SUM  .^ POWER_INV;

VK_LY8A=KC8 .^ POWER; 
VK_LY8B=PC_LAY8 .* VK_LY8A;
VK_LY8C=KF8 .^ POWER;
VK_LY8D=PF_LAY8 .* VK_LY8C;
VK_LY8_SUM=VK_LY8B + VK_LY8D;
VK_LAY8=VK_LY8_SUM  .^ POWER_INV;

VK_LY9A=KC9 .^ POWER; 
VK_LY9B=PC_LAY9 .* VK_LY9A;
VK_LY9C=KF9 .^ POWER;
VK_LY9D=PF_LAY9 .* VK_LY9C;
VK_LY9_SUM=VK_LY9B + VK_LY9D;
VK_LAY9=VK_LY9_SUM  .^ POWER_INV;

VK_LY10A=KC10 .^ POWER; 
VK_LY10B=PC_LAY10 .* VK_LY10A;
VK_LY10C=KF10 .^ POWER;
VK_LY10D=PF_LAY10 .* VK_LY10C;
VK_LY10_SUM=VK_LY10B + VK_LY10D;
VK_LAY10=VK_LY10_SUM  .^ POWER_INV;

KC1S=PC_LAY1 .* KCS;
KC2S=PC_LAY2 .* KCS;
KC3S=PC_LAY3 .* KCS;
KC4S=PC_LAY4 .* KCS;
KC5S=PC_LAY5 .* KCS;
KC6S=PC_LAY6 .* KCS;
KC7S=PC_LAY7 .* KCS;
KC8S=PC_LAY8 .* KCS;
KC9S=PC_LAY9 .* KCS;
KC10S=PC_LAY10 .* KCS;

KF1S=PF_LAY1 .* KFS;
KF2S=PF_LAY2 .* KFS;
KF3S=PF_LAY3 .* KFS;
KF4S=PF_LAY4 .* KFS;
KF5S=PF_LAY5 .* KFS;
KF6S=PF_LAY6 .* KFS;
KF7S=PF_LAY7 .* KFS;
KF8S=PF_LAY8 .* KFS;
KF9S=PF_LAY9 .* KFS;
KF10S=PF_LAY10 .* KFS;

HK_LAY1S=KC1S + KF1S;
HK_LAY2S=KC2S + KF2S;
HK_LAY3S=KC3S + KF3S;
HK_LAY4S=KC4S + KF4S;
HK_LAY5S=KC5S + KF5S;
HK_LAY6S=KC6S + KF6S;
HK_LAY7S=KC7S + KF7S;
HK_LAY8S=KC8S + KF8S;
HK_LAY9S=KC9S + KF9S;
HK_LAY10S=KC10S + KF10S;

VK_LY1AS=KC1S .^ POWERS;
VK_LY1BS=PC_LAY1 .* VK_LY1AS;
VK_LY1CS=KF1S .^ POWERS;
VK_LY1DS=PF_LAY1 .* VK_LY1CS;
VK_LY1_SS=VK_LY1BS + VK_LY1DS;
VK_LAY1S=VK_LY1_SS  .^ POWER_INVS;

VK_LY2AS=KC2S .^ POWERS;
VK_LY2BS=PC_LAY2 .* VK_LY2AS;
VK_LY2CS=KF2S .^ POWERS;
VK_LY2DS=PF_LAY2 .* VK_LY2CS;
VK_LY2_SS=VK_LY2BS + VK_LY2DS;
VK_LAY2S=VK_LY2_SS  .^ POWER_INVS;

VK_LY3AS=KC3S .^ POWERS;
VK_LY3BS=PC_LAY3 .* VK_LY3AS;
VK_LY3CS=KF3S .^ POWERS;
VK_LY3DS=PF_LAY3 .* VK_LY3CS;
VK_LY3_SS=VK_LY3BS + VK_LY3DS;
VK_LAY3S=VK_LY3_SS  .^ POWER_INVS;

VK_LY4AS=KC4S .^ POWERS;
VK_LY4BS=PC_LAY4 .* VK_LY4AS;
VK_LY4CS=KF4S .^ POWERS;
VK_LY4DS=PF_LAY4 .* VK_LY4CS;
VK_LY4_SS=VK_LY4BS + VK_LY4DS;
VK_LAY4S=VK_LY4_SS  .^ POWER_INVS;

VK_LY5AS=KC5S .^ POWERS;
VK_LY5BS=PC_LAY5 .* VK_LY5AS;
VK_LY5CS=KF5S .^ POWERS;
VK_LY5DS=PF_LAY5 .* VK_LY5CS;
VK_LY5_SS=VK_LY5BS + VK_LY5DS;
VK_LAY5S=VK_LY5_SS  .^ POWER_INVS;

VK_LY6AS=KC6S .^ POWERS;
VK_LY6BS=PC_LAY6 .* VK_LY6AS;
VK_LY6CS=KF6S .^ POWERS;
VK_LY6DS=PF_LAY6 .* VK_LY6CS;
VK_LY6_SS=VK_LY6BS + VK_LY6DS;
VK_LAY6S=VK_LY6_SS  .^ POWER_INVS;

VK_LY7AS=KC7S .^ POWERS;
VK_LY7BS=PC_LAY7 .* VK_LY7AS;
VK_LY7CS=KF7S .^ POWERS;
VK_LY7DS=PF_LAY7 .* VK_LY7CS;
VK_LY7_SS=VK_LY7BS + VK_LY7DS;
VK_LAY7S=VK_LY7_SS  .^ POWER_INVS;

VK_LY8AS=KC8S .^ POWERS;
VK_LY8BS=PC_LAY8 .* VK_LY8AS;
VK_LY8CS=KF8S .^ POWERS;
VK_LY8DS=PF_LAY8 .* VK_LY8CS;
VK_LY8_SS=VK_LY8BS + VK_LY8DS;
VK_LAY8S=VK_LY8_SS  .^ POWER_INVS;

VK_LY9AS=KC9S .^ POWERS;
VK_LY9BS=PC_LAY9 .* VK_LY9AS;
VK_LY9CS=KF9S .^ POWERS;
VK_LY9DS=PF_LAY9 .* VK_LY9CS;
VK_LY9_SS=VK_LY9BS + VK_LY9DS;
VK_LAY9S=VK_LY9_SS  .^ POWER_INVS;

VK_LY10AS=KC10S .^ POWERS;
VK_LY10BS=PC_LAY10 .* VK_LY10AS;
VK_LY10CS=KF10S .^ POWERS;
VK_LY10DS=PF_LAY10 .* VK_LY10CS;
VK_LY10_SS=VK_LY10BS + VK_LY10DS;
VK_LAY10S=VK_LY10_SS  .^ POWER_INVS;

%convert imaginary numbers to nans
for i=1:441
    for j=1:98
        [i j]
        for k=1:10
            eval(['in=isreal(HK_LAY' num2str(k) '(' num2str(i) ',' num2str(j) ')' ');'])
            if ~in
                eval(['HK_LAY' num2str(k) '(' num2str(i) ',' num2str(j) ')=nan;'])
            end
            eval(['in=isreal(HK_LAY' num2str(k) 'S(' num2str(i) ',' num2str(j) ')' ');'])
            if ~in
                eval([HK_LAY' num2str(k) 'S(' num2str(i) ',' num2str(j) ')=nan;'])
            end
            eval(['in=isreal(VK_LAY' num2str(k) '(' num2str(i) ',' num2str(j) ')' ');'])
            if ~in
                eval(['VK_LAY' num2str(k) '(' num2str(i) ',' num2str(j) ')=nan;'])
            end
            eval(['in=isreal(VK_LAY' num2str(k) 'S(' num2str(i) ',' num2str(j) ')' ');'])
            if ~in
                eval(['VK_LAY' num2str(k) 'S(' num2str(i) ',' num2str(j) ')=nan;'])
            end
        end
    end
end


save('datafromMult','HK_LAY1','HK_LAY2','HK_LAY3','HK_LAY4','HK_LAY5','HK_LAY6',...
    'HK_LAY7','HK_LAY8','HK_LAY9','HK_LAY10',...
    'HK_LAY1S','HK_LAY2S','HK_LAY3S','HK_LAY4S','HK_LAY5S','HK_LAY6S',...
    'HK_LAY7S','HK_LAY8S','HK_LAY9S','HK_LAY10S',...
    'VK_LAY1','VK_LAY2','VK_LAY3','VK_LAY4','VK_LAY5','VK_LAY6',...
    'VK_LAY7','VK_LAY8','VK_LAY9','VK_LAY10',...
    'VK_LAY1S','VK_LAY2S','VK_LAY3S','VK_LAY4S','VK_LAY5S','VK_LAY6S',...
    'VK_LAY7S','VK_LAY8S','VK_LAY9S','VK_LAY10S');














